*
*  Compiled by DCC Version 1.31.00
*           on Wed Jan 10 16:22:45 2001
*

*
*
*
*    Code Section
*
@ZLIB06 CSECT
@ZLIB06 AMODE ANY
@ZLIB06 RMODE ANY
         EXTRN ifmask
*
*
*
iffast   #PROLOG CINDEX=93,BASER=12,FRAME=160,ENTRY=YES
         ST    1,80(0,13)  ; Save ptr to incoming parm block
* ******* End of Prologue
* *
* ***     inflate_huft *t;
* ***     uInt e;
* ***     uLong b;
* ***     uInt k;
* ***     Bytef *p;
* ***     uInt n;
* ***     Bytef *q;
* ***     uInt m;
* ***     uInt ml;
* ***     uInt md;
* ***     uInt c;
* ***     uInt d;
* ***     Bytef *r;
* ***
* ***
* ***   {{p=z->next_in;n=z->avail_in;b=s->bitb;k=s->bitk;} {q=s->write\
* ;m=(uInt)(uInt)(q<s->read?s->read-q-1:s->end-q);}}
         L     2,20(0,1)   ; z
         L     3,0(0,2)
         ST    3,120(0,13) ; p
         LA    2,4(0,2)    ; offset of avail_in in z_stream_s
         L     4,0(0,2)
         ST    4,124(0,13) ; n
         L     2,16(0,1)   ; s
         LA    2,32(0,2)   ; offset of bitb in inflate_blocks_state
         L     5,0(0,2)
         ST    5,112(0,13) ; b
         L     2,16(0,1)   ; s
         LA    2,28(0,2)   ; offset of bitk in inflate_blocks_state
         L     6,0(0,2)
         ST    6,116(0,13) ; k
         L     2,16(0,1)   ; s
         LA    2,52(0,2)   ; offset of write in inflate_blocks_state
         L     7,0(0,2)
         ST    7,128(0,13) ; q
         L     2,16(0,1)   ; s
         LA    2,48(0,2)   ; offset of read in inflate_blocks_state
         L     8,0(0,2)
         CR    7,8
         BNL   @@gen_label1
         L     2,16(0,1)   ; s
         LA    2,48(0,2)   ; offset of read in inflate_blocks_state
         L     8,0(0,2)
         SLR   8,7
         BCTR  8,0
         B     @@gen_label2
         DS    0D
@FRAMESIZE_93  DC F'160'
@lit_93_2  DC A(ifmask)
@lit_93_4  DC F'8' 0x00000008
@lit_93_3  DC F'0' 0x00000000
@lit_93_5  DC F'20' 0x00000014
@lit_93_10  DC F'15' 0x0000000f
@lit_93_17 DC XL8'8995A58193898440' invalid.
         DC XL8'8489A2A381958385' distance
         DC XL6'408396848500' .code.
@lit_region_diff_93_1_2  DC A(@REGION_93_2-@REGION_93_1)
@lit_93_18  DC F'-3' 0xfffffffd
@lit_93_21 DC XL8'8995A58193898440' invalid.
         DC XL8'9389A38599819361' literal.
         DC XL8'93859587A3884083' length.c
         DC XL4'96848500' ode.
@lit_93_23  DC F'258' 0x00000102
@lit_93_24  DC F'10' 0x0000000a
@@gen_label1 DS 0H
         L     2,80(0,13)
         L     3,16(0,2)   ; s
         LA    3,44(0,3)   ; offset of end in inflate_blocks_state
         L     4,0(0,3)
         L     3,128(0,13) ; q
         SLR   4,3
         LR    8,4
@@gen_label2 DS 0H
         ST    8,132(0,13) ; m
* ***
* ***
* ***   ml = ifmaskÝbl¨;
         L     2,80(0,13)
         L     3,0(0,2)    ; bl
         L     4,@lit_93_2
         SLL   3,2(0)
         LA    3,0(3,4)
         L     4,0(0,3)
         ST    4,136(0,13) ; ml
* ***     md = ifmaskÝbd¨;
         L     3,4(0,2)    ; bd
         L     5,@lit_93_2
         SLL   3,2(0)
         LA    3,0(3,5)
         L     5,0(0,3)
         ST    5,140(0,13) ; md
* ***
* ***
* ***   do {
         B     @L4
@L0      DS    0H
* ***
* ***   {while(k<(20)){b|=((uLong)(n--,*p++))<<k;k+=8;}}
@L3      DS    0H
         L     2,124(0,13) ; n
         BCTR  2,0
         ST    2,124(0,13) ; n
         L     3,120(0,13) ; p
         LR    4,3
         LA    3,1(0,3)
         ST    3,120(0,13) ; p
         IC    5,0(0,4)
         ICM   5,B'1110',@lit_93_3
         L     4,116(0,13) ; k
         SLL   5,0(4)
         O     5,112(0,13)
         ST    5,112(0,13) ; b
         AL    4,@lit_93_4
         ST    4,116(0,13) ; k
@L4      DS    0H
         L     2,116(0,13) ; k
         CL    2,@lit_93_5
         BL    @L3
* ***       if ((e = (t = tl + ((uInt)b & ml))->word.what.Exop) == 0)
         L     3,80(0,13)
         L     4,8(0,3)    ; tl
         L     5,112(0,13) ; b
         N     5,136(0,13)
         SLL   5,3(0)
         LA    4,0(4,5)
         ST    4,104(0,13) ; t
         IC    5,0(0,4)
         ICM   5,B'1110',@lit_93_3
         ST    5,108(0,13) ; e
         LTR   5,5
         BNE   @L8
* ***       {
* ***         {b>>=(t->word.what.Bits);k-=(t->word.what.Bits);}
         L     6,112(0,13) ; b
         LA    4,1(0,4)    ; offset of Bits in 0000001
         LA    7,0(0,0)
         IC    7,0(0,4)
         SRL   6,0(7)
         ST    6,112(0,13) ; b
         L     4,104(0,13) ; t
         LA    4,1(0,4)    ; offset of Bits in 0000001
         LA    7,0(0,0)
         IC    7,0(0,4)
         SLR   2,7
         ST    2,116(0,13) ; k
* ***         ;
* ***         # 66
* ***   *q++ = (Byte)t->base;
         L     4,128(0,13) ; q
         LR    7,4
         LA    4,1(0,4)
         ST    4,128(0,13) ; q
         L     8,104(0,13) ; t
         LA    8,4(0,8)    ; offset of base in inflate_huft_s
         L     9,0(0,8)
         STC   9,0(0,7)
* ***         m--;
         L     7,132(0,13) ; m
         BCTR  7,0
         ST    7,132(0,13) ; m
* ***         continue;
         B     @L2
* ***       }
* ***       do {
@L8      DS    0H
* ***         {b>>=(t->word.what.Bits);k-=(t->word.what.Bits);}
         L     2,112(0,13) ; b
         L     3,104(0,13) ; t
         LA    3,1(0,3)    ; offset of Bits in 0000001
         LA    4,0(0,0)
         IC    4,0(0,3)
         SRL   2,0(4)
         ST    2,112(0,13) ; b
         L     3,116(0,13) ; k
         L     4,104(0,13) ; t
         LA    4,1(0,4)    ; offset of Bits in 0000001
         LA    5,0(0,0)
         IC    5,0(0,4)
         SLR   3,5
         ST    3,116(0,13) ; k
* ***         if (e & 16)
         LA    4,16(0,0)
         N     4,108(0,13)
         LTR   4,4
         BZ    @L11
* ***         {
* ***
* ***   e &= 15;
         LA    4,15(0,0)
         N     4,108(0,13)
         ST    4,108(0,13) ; e
* ***           c = t->base + ((uInt)b & ifmaskÝe¨);
         L     5,104(0,13) ; t
         LA    5,4(0,5)    ; offset of base in inflate_huft_s
         L     6,0(0,5)
         L     5,@lit_93_2
         SLL   4,2(0)
         LA    4,0(4,5)
         L     5,0(0,4)
         N     5,112(0,13)
         ALR   6,5
         ST    6,144(0,13) ; c
* ***           {b>>=(e);k-=(e);}
         L     4,108(0,13) ; e
         SRL   2,0(4)
         ST    2,112(0,13) ; b
         SL    3,108(0,13)
         ST    3,116(0,13) ; k
* ***           ;
* ***
* ***
* ***   {while(k<(15)){b|=((uLong)(n--,*p++))<<k;k+=8;}};
         B     @L13
@L12     DS    0H
         L     2,124(0,13) ; n
         BCTR  2,0
         ST    2,124(0,13) ; n
         L     3,120(0,13) ; p
         LR    4,3
         LA    3,1(0,3)
         ST    3,120(0,13) ; p
         IC    5,0(0,4)
         ICM   5,B'1110',@lit_93_3
         L     4,116(0,13) ; k
         SLL   5,0(4)
         O     5,112(0,13)
         ST    5,112(0,13) ; b
         AL    4,@lit_93_4
         ST    4,116(0,13) ; k
@L13     DS    0H
         L     2,116(0,13) ; k
         CL    2,@lit_93_10
         BL    @L12
* ***           e = (t = td + ((uInt)b & md))->word.what.Exop;
         L     3,80(0,13)
         L     4,12(0,3)   ; td
         L     5,112(0,13) ; b
         N     5,140(0,13)
         SLL   5,3(0)
         LA    4,0(4,5)
         ST    4,104(0,13) ; t
         IC    5,0(0,4)
         ICM   5,B'1110',@lit_93_3
         ST    5,108(0,13) ; e
* ***           do {
@L16     DS    0H
* ***             {b>>=(t->word.what.Bits);k-=(t->word.what.Bits);}
         L     2,112(0,13) ; b
         L     3,104(0,13) ; t
         LA    3,1(0,3)    ; offset of Bits in 0000001
         LA    4,0(0,0)
         IC    4,0(0,3)
         SRL   2,0(4)
         ST    2,112(0,13) ; b
         L     3,116(0,13) ; k
         L     4,104(0,13) ; t
         LA    4,1(0,4)    ; offset of Bits in 0000001
         LA    5,0(0,0)
         IC    5,0(0,4)
         SLR   3,5
         ST    3,116(0,13) ; k
* ***             if (e & 16)
         LA    4,16(0,0)
         N     4,108(0,13)
         LTR   4,4
         BZ    @L19
* ***             {
* ***
* ***   e &= 15;
         LA    4,15(0,0)
         N     4,108(0,13)
         ST    4,108(0,13) ; e
* ***               {while(k<(e)){b|=((uLong)(n--,*p++))<<k;k+=8;}}
         B     @L21
@L20     DS    0H
         L     2,124(0,13) ; n
         BCTR  2,0
         ST    2,124(0,13) ; n
         L     3,120(0,13) ; p
         LR    4,3
         LA    3,1(0,3)
         ST    3,120(0,13) ; p
         IC    5,0(0,4)
         ICM   5,B'1110',@lit_93_3
         L     4,116(0,13) ; k
         SLL   5,0(4)
         O     5,112(0,13)
         ST    5,112(0,13) ; b
         AL    4,@lit_93_4
         ST    4,116(0,13) ; k
@L21     DS    0H
         L     2,116(0,13) ; k
         CL    2,108(0,13)
         BL    @L20
* ***               d = t->base + ((uInt)b & ifmaskÝe¨);
         L     3,104(0,13) ; t
         LA    3,4(0,3)    ; offset of base in inflate_huft_s
         L     4,0(0,3)
         L     3,108(0,13) ; e
         L     5,@lit_93_2
         SLL   3,2(0)
         LA    3,0(3,5)
         L     5,0(0,3)
         N     5,112(0,13)
         ALR   4,5
         ST    4,148(0,13) ; d
* ***               {b>>=(e);k-=(e);}
         L     3,112(0,13) ; b
         L     5,108(0,13) ; e
         SRL   3,0(5)
         ST    3,112(0,13) ; b
         SL    2,108(0,13)
         ST    2,116(0,13) ; k
* ***               ;
* ***
* ***
* ***   m -= c;
         L     6,132(0,13) ; m
         SL    6,144(0,13)
         ST    6,132(0,13) ; m
* ***               if ((uInt)(q - s->window) >= d)
         L     7,128(0,13) ; q
         L     8,80(0,13)
         L     9,16(0,8)   ; s
         LA    9,40(0,9)   ; offset of window in inflate_blocks_state
         L     10,0(0,9)
         SLR   7,10
         CL    7,148(0,13)
         BL    @L24
* ***               {
* ***                 r = q - d;
         L     7,128(0,13) ; q
         SLR   7,4
         ST    7,152(0,13) ; r
* ***                 *q++ = *r++; c--;
         L     9,128(0,13) ; q
         LR    10,9
         LA    9,1(0,9)
         ST    9,128(0,13) ; q
         LR    11,7
         LA    7,1(0,7)
         ST    7,152(0,13) ; r
         IC    0,0(0,11)
         STC   0,0(0,10)
         L     10,144(0,13) ; c
         BCTR  10,0
         ST    10,144(0,13) ; c
* ***                 *q++ = *r++; c--;
         LR    11,9
         LA    9,1(0,9)
         ST    9,128(0,13) ; q
         LR    1,7
         LA    7,1(0,7)
         ST    7,152(0,13) ; r
         IC    0,0(0,1)
         STC   0,0(0,11)
         BCTR  10,0
         ST    10,144(0,13) ; c
* ***               }
* ***               else
* ***               {
         B     @L30
@L24     DS    0H
* ***                 e = d - (uInt)(q - s->window);
         L     2,148(0,13) ; d
         L     3,128(0,13) ; q
         L     4,80(0,13)
         L     5,16(0,4)   ; s
         LA    5,40(0,5)   ; offset of window in inflate_blocks_state
         L     6,0(0,5)
         SLR   3,6
         SLR   2,3
         ST    2,108(0,13) ; e
* ***                 r = s->end - e;
         L     3,16(0,4)   ; s
         LA    3,44(0,3)   ; offset of end in inflate_blocks_state
         L     5,0(0,3)
         SLR   5,2
         ST    5,152(0,13) ; r
* ***                 if (c > e)
         L     3,144(0,13) ; c
         CL    3,108(0,13)
         BNH   @L30
* ***                 {
* ***                   c -= e;
         SL    3,108(0,13)
         ST    3,144(0,13) ; c
* ***                   do {
@L27     DS    0H
* ***                     *q++ = *r++;
         L     2,128(0,13) ; q
         LR    3,2
         LA    2,1(0,2)
         ST    2,128(0,13) ; q
         L     4,152(0,13) ; r
         LR    5,4
         LA    4,1(0,4)
         ST    4,152(0,13) ; r
         IC    6,0(0,5)
         STC   6,0(0,3)
* ***                   } while (--e);
         L     3,108(0,13) ; e
         BCTR  3,0
         ST    3,108(0,13) ; e
         LTR   3,3
         BNZ   @L27
* ***                   r = s->window;
         L     5,80(0,13)
         L     6,16(0,5)   ; s
         LA    6,40(0,6)   ; offset of window in inflate_blocks_state
         L     7,0(0,6)
         ST    7,152(0,13) ; r
* ***                 }
* ***               }
         B     @L30
@L26     DS    0H
* ***               do {
@L30     DS    0H
* ***                 *q++ = *r++;
         L     2,128(0,13) ; q
         LR    3,2
         LA    2,1(0,2)
         ST    2,128(0,13) ; q
         L     4,152(0,13) ; r
         LR    5,4
         LA    4,1(0,4)
         ST    4,152(0,13) ; r
         IC    6,0(0,5)
         STC   6,0(0,3)
* ***               } while (--c);
         L     3,144(0,13) ; c
         BCTR  3,0
         ST    3,144(0,13) ; c
         LTR   3,3
         BNZ   @L30
* ***               break;
         B     @L2
* ***             }
* ***             else if ((e & 64) == 0)
@L19     DS    0H
         LA    2,64(0,0)
         N     2,108(0,13)
         LTR   2,2
         BNE   @L34
* ***             {
* ***               t += t->base;
         L     2,104(0,13) ; t
         LA    3,4(0,2)    ; offset of base in inflate_huft_s
         L     4,0(0,3)
         SLL   4,3(0)
         LA    2,0(2,4)
         ST    2,104(0,13) ; t
* ***               e = (t += ((uInt)b & ifmaskÝe¨))->word.what.Exop;
         L     3,108(0,13) ; e
         L     4,@lit_93_2
         SLL   3,2(0)
         LA    3,0(3,4)
         L     4,0(0,3)
         N     4,112(0,13)
         SLL   4,3(0)
         LA    2,0(2,4)
         ST    2,104(0,13) ; t
         IC    3,0(0,2)
         ICM   3,B'1110',@lit_93_3
         ST    3,108(0,13) ; e
* ***             }
* ***             else
* ***             {
         B     @L16
@L34     DS    0H
* ***               z->msg = (char*)"invalid distance code";
         L     2,80(0,13)
         L     3,20(0,2)   ; z
         LA    3,24(0,3)   ; offset of msg in z_stream_s
         LA    4,@lit_93_17
         ST    4,0(0,3)    ; offset of msg in z_stream_s
* ***               {c=z->avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<\
* <3;}
         L     3,20(0,2)   ; z
         LA    3,4(0,3)    ; offset of avail_in in z_stream_s
         L     4,0(0,3)
         SL    4,124(0,13)
         ST    4,144(0,13) ; c
         L     3,116(0,13) ; k
         SRL   3,3(0)
         CL    3,144(0,13)
         BNL   @@gen_label15
         L     3,116(0,13) ; k
         SRL   3,3(0)
         B     @@gen_label16
@@gen_label15 DS 0H
         L     2,144(0,13) ; c
         LR    3,2
@@gen_label16 DS 0H
         ST    3,144(0,13) ; c
         L     2,124(0,13) ; n
         AL    2,144(0,13) ; c
         ST    2,124(0,13) ; n
         L     4,120(0,13) ; p
         SLR   4,3
         ST    4,120(0,13) ; p
         L     5,116(0,13) ; k
         SLL   3,3(0)
         SLR   5,3
         ST    5,116(0,13) ; k
* ***               {{s->bitb=b;s->bitk=k;} {z->avail_in=n;z->total_in\
* +=p-z->next_in;z->next_in=p;} {s->write=q;}}
         L     3,80(0,13)
         L     6,16(0,3)   ; s
         LA    6,32(0,6)   ; offset of bitb in inflate_blocks_state
         L     7,112(0,13) ; b
         ST    7,0(0,6)    ; offset of bitb in inflate_blocks_state
         L     2,16(0,3)   ; s
         LA    2,28(0,2)   ; offset of bitk in inflate_blocks_state
         L     5,116(0,13) ; k
         ST    5,0(0,2)    ; offset of bitk in inflate_blocks_state
         L     2,20(0,3)   ; z
         LA    2,4(0,2)    ; offset of avail_in in z_stream_s
         L     5,124(0,13) ; n
         ST    5,0(0,2)    ; offset of avail_in in z_stream_s
         L     2,20(0,3)   ; z
         LA    2,8(0,2)    ; offset of total_in in z_stream_s
         LR    5,2
         L     6,0(0,2)
         L     2,20(0,3)   ; z
         L     7,0(0,2)
         SLR   4,7
         ALR   6,4
         ST    6,0(0,5)
         L     4,120(0,13) ; p
         ST    4,0(0,2)    ; z
         L     2,16(0,3)   ; s
         LA    2,52(0,2)   ; offset of write in inflate_blocks_state
         L     4,128(0,13) ; q
         ST    4,0(0,2)    ; offset of write in inflate_blocks_state
* ***               return (-3);
         L     15,@lit_93_18
         AL    12,@lit_region_diff_93_1_2
         DROP  12
         USING @REGION_93_2,12
         B     @ret_lab_93
         DROP  12
         USING @REGION_93_1,12
* ***             }
* ***           } while (1);
@L17     DS    0H
* ***           break;
* ***         }
* ***         if ((e & 64) == 0)
@L11     DS    0H
         LA    2,64(0,0)
         N     2,108(0,13)
         LTR   2,2
         BNE   @L36
* ***         {
* ***           t += t->base;
         L     2,104(0,13) ; t
         LA    3,4(0,2)    ; offset of base in inflate_huft_s
         L     4,0(0,3)
         SLL   4,3(0)
         LA    2,0(2,4)
         ST    2,104(0,13) ; t
* ***           if ((e = (t += ((uInt)b & ifmaskÝe¨))->word.what.Exop)\
*  == 0)
         L     3,108(0,13) ; e
         L     4,@lit_93_2
         SLL   3,2(0)
         LA    3,0(3,4)
         L     4,0(0,3)
         N     4,112(0,13)
         SLL   4,3(0)
         LA    2,0(2,4)
         ST    2,104(0,13) ; t
         IC    3,0(0,2)
         ICM   3,B'1110',@lit_93_3
         ST    3,108(0,13) ; e
         LTR   3,3
         BNE   @L8
* ***           {
* ***             {b>>=(t->word.what.Bits);k-=(t->word.what.Bits);}
         L     4,112(0,13) ; b
         LA    2,1(0,2)    ; offset of Bits in 0000001
         LA    5,0(0,0)
         IC    5,0(0,2)
         SRL   4,0(5)
         ST    4,112(0,13) ; b
         L     2,116(0,13) ; k
         L     5,104(0,13) ; t
         LA    5,1(0,5)    ; offset of Bits in 0000001
         LA    6,0(0,0)
         IC    6,0(0,5)
         SLR   2,6
         ST    2,116(0,13) ; k
* ***             ;
* ***             # 144
* ***   *q++ = (Byte)t->base;
         L     5,128(0,13) ; q
         LR    6,5
         LA    5,1(0,5)
         ST    5,128(0,13) ; q
         L     7,104(0,13) ; t
         LA    7,4(0,7)    ; offset of base in inflate_huft_s
         L     8,0(0,7)
         STC   8,0(0,6)
* ***             m--;
         L     6,132(0,13) ; m
         BCTR  6,0
         ST    6,132(0,13) ; m
* ***             break;
         B     @L2
* ***           }
* ***         }
@L37     DS    0H
* ***         else if (e & 32)
@L36     DS    0H
         LA    2,32(0,0)
         N     2,108(0,13)
         LTR   2,2
         BZ    @L39
* ***         {
* ***           ;
* ***           {c=z->avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;}
         L     2,80(0,13)
         L     3,20(0,2)   ; z
         LA    3,4(0,3)    ; offset of avail_in in z_stream_s
         L     4,0(0,3)
         SL    4,124(0,13)
         ST    4,144(0,13) ; c
         L     3,116(0,13) ; k
         SRL   3,3(0)
         CL    3,144(0,13)
         BNL   @@gen_label22
         L     3,116(0,13) ; k
         SRL   3,3(0)
         B     @@gen_label23
@@gen_label22 DS 0H
         L     2,144(0,13) ; c
         LR    3,2
@@gen_label23 DS 0H
         ST    3,144(0,13) ; c
         L     2,124(0,13) ; n
         AL    2,144(0,13) ; c
         ST    2,124(0,13) ; n
         L     4,120(0,13) ; p
         SLR   4,3
         ST    4,120(0,13) ; p
         L     5,116(0,13) ; k
         SLL   3,3(0)
         SLR   5,3
         ST    5,116(0,13) ; k
* ***           {{s->bitb=b;s->bitk=k;} {z->avail_in=n;z->total_in+=p-\
* z->next_in;z->next_in=p;} {s->write=q;}}
         L     3,80(0,13)
         L     6,16(0,3)   ; s
         LA    6,32(0,6)   ; offset of bitb in inflate_blocks_state
         L     7,112(0,13) ; b
         ST    7,0(0,6)    ; offset of bitb in inflate_blocks_state
         L     2,16(0,3)   ; s
         LA    2,28(0,2)   ; offset of bitk in inflate_blocks_state
         L     5,116(0,13) ; k
         ST    5,0(0,2)    ; offset of bitk in inflate_blocks_state
         L     2,20(0,3)   ; z
         LA    2,4(0,2)    ; offset of avail_in in z_stream_s
         L     5,124(0,13) ; n
         ST    5,0(0,2)    ; offset of avail_in in z_stream_s
         L     2,20(0,3)   ; z
         LA    2,8(0,2)    ; offset of total_in in z_stream_s
         LR    5,2
         L     6,0(0,2)
         L     2,20(0,3)   ; z
         L     7,0(0,2)
         SLR   4,7
         ALR   6,4
         ST    6,0(0,5)
         L     4,120(0,13) ; p
         ST    4,0(0,2)    ; z
         L     2,16(0,3)   ; s
         LA    2,52(0,2)   ; offset of write in inflate_blocks_state
         L     4,128(0,13) ; q
         ST    4,0(0,2)    ; offset of write in inflate_blocks_state
* ***           return 1;
         LA    15,1(0,0)
         AL    12,@lit_region_diff_93_1_2
         DROP  12
         USING @REGION_93_2,12
         B     @ret_lab_93
         DROP  12
         USING @REGION_93_1,12
* ***         }
* ***         else
* ***         {
@L39     DS    0H
* ***           z->msg = (char*)"invalid literal/length code";
         L     2,80(0,13)
         L     3,20(0,2)   ; z
         LA    3,24(0,3)   ; offset of msg in z_stream_s
         LA    4,@lit_93_21
         ST    4,0(0,3)    ; offset of msg in z_stream_s
* ***           {c=z->avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;}
         L     3,20(0,2)   ; z
         LA    3,4(0,3)    ; offset of avail_in in z_stream_s
         L     4,0(0,3)
         SL    4,124(0,13)
         ST    4,144(0,13) ; c
         L     3,116(0,13) ; k
         SRL   3,3(0)
         CL    3,144(0,13)
         BNL   @@gen_label25
         L     3,116(0,13) ; k
         SRL   3,3(0)
         B     @@gen_label26
@@gen_label25 DS 0H
         L     2,144(0,13) ; c
         LR    3,2
@@gen_label26 DS 0H
         ST    3,144(0,13) ; c
         L     2,124(0,13) ; n
         AL    2,144(0,13) ; c
         ST    2,124(0,13) ; n
         L     4,120(0,13) ; p
         SLR   4,3
         ST    4,120(0,13) ; p
         L     5,116(0,13) ; k
         SLL   3,3(0)
         SLR   5,3
         ST    5,116(0,13) ; k
* ***           {{s->bitb=b;s->bitk=k;} {z->avail_in=n;z->total_in+=p-\
* z->next_in;z->next_in=p;} {s->write=q;}}
         L     3,80(0,13)
         L     6,16(0,3)   ; s
         LA    6,32(0,6)   ; offset of bitb in inflate_blocks_state
         L     7,112(0,13) ; b
         ST    7,0(0,6)    ; offset of bitb in inflate_blocks_state
         L     2,16(0,3)   ; s
         LA    2,28(0,2)   ; offset of bitk in inflate_blocks_state
         L     5,116(0,13) ; k
         ST    5,0(0,2)    ; offset of bitk in inflate_blocks_state
         L     2,20(0,3)   ; z
         LA    2,4(0,2)    ; offset of avail_in in z_stream_s
         L     5,124(0,13) ; n
         ST    5,0(0,2)    ; offset of avail_in in z_stream_s
         L     2,20(0,3)   ; z
         LA    2,8(0,2)    ; offset of total_in in z_stream_s
         LR    5,2
         L     6,0(0,2)
         L     2,20(0,3)   ; z
         L     7,0(0,2)
         SLR   4,7
         ALR   6,4
         ST    6,0(0,5)
         L     4,120(0,13) ; p
         ST    4,0(0,2)    ; z
         L     2,16(0,3)   ; s
         LA    2,52(0,2)   ; offset of write in inflate_blocks_state
         L     4,128(0,13) ; q
         ST    4,0(0,2)    ; offset of write in inflate_blocks_state
* ***           return (-3);
         L     15,@lit_93_18
         AL    12,@lit_region_diff_93_1_2
         DROP  12
         USING @REGION_93_2,12
         B     @ret_lab_93
         DROP  12
         USING @REGION_93_1,12
* ***         }
* ***       } while (1);
@L9      DS    0H
* ***     } while (m >= 258 && n >= 10);
@L2      DS    0H
         L     2,132(0,13) ; m
         CL    2,@lit_93_23
         BL    @@gen_label28
         L     3,124(0,13) ; n
         CL    3,@lit_93_24
         BNL   @L4
@@gen_label28 DS 0H
* ***
* ***
* ***   {c=z->avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;}
         L     2,80(0,13)
         L     3,20(0,2)   ; z
         LA    3,4(0,3)    ; offset of avail_in in z_stream_s
         L     4,0(0,3)
         SL    4,124(0,13)
         ST    4,144(0,13) ; c
         L     3,116(0,13) ; k
         SRL   3,3(0)
         CL    3,144(0,13)
         BNL   @@gen_label31
         L     3,116(0,13) ; k
         SRL   3,3(0)
         B     @@gen_label32
@@gen_label31 DS 0H
         L     2,144(0,13) ; c
         LR    3,2
@@gen_label32 DS 0H
         ST    3,144(0,13) ; c
         L     2,124(0,13) ; n
         AL    2,144(0,13) ; c
         ST    2,124(0,13) ; n
         L     4,120(0,13) ; p
         SLR   4,3
         ST    4,120(0,13) ; p
         L     5,116(0,13) ; k
         SLL   3,3(0)
         SLR   5,3
         ST    5,116(0,13) ; k
* ***     {{s->bitb=b;s->bitk=k;} {z->avail_in=n;z->total_in+=p-z->nex\
* t_in;z->next_in=p;} {s->write=q;}}
         L     3,80(0,13)
         L     6,16(0,3)   ; s
         LA    6,32(0,6)   ; offset of bitb in inflate_blocks_state
         L     7,112(0,13) ; b
         ST    7,0(0,6)    ; offset of bitb in inflate_blocks_state
         L     2,16(0,3)   ; s
         LA    2,28(0,2)   ; offset of bitk in inflate_blocks_state
         L     5,116(0,13) ; k
         ST    5,0(0,2)    ; offset of bitk in inflate_blocks_state
         L     2,20(0,3)   ; z
         LA    2,4(0,2)    ; offset of avail_in in z_stream_s
         L     5,124(0,13) ; n
         ST    5,0(0,2)    ; offset of avail_in in z_stream_s
         L     2,20(0,3)   ; z
         LA    2,8(0,2)    ; offset of total_in in z_stream_s
         LR    5,2
         L     6,0(0,2)
         L     2,20(0,3)   ; z
         L     7,0(0,2)
         SLR   4,7
         ALR   6,4
         ST    6,0(0,5)
         L     4,120(0,13) ; p
         ST    4,0(0,2)    ; z
         L     2,16(0,3)   ; s
         LA    2,52(0,2)   ; offset of write in inflate_blocks_state
         L     4,128(0,13) ; q
         ST    4,0(0,2)    ; offset of write in inflate_blocks_state
* ***     return 0;
         LA    15,0(0,0)
         AL    12,@lit_region_diff_93_1_2
         DROP  12
         USING @REGION_93_2,12
         B     @ret_lab_93
         DROP  12
         USING @REGION_93_1,12
* ***   }
         AL    12,@lit_region_diff_93_1_2
@REGION_93_2 DS 0H
         DROP  12
         USING @REGION_93_2,12
@ret_lab_93 DS 0H
* * **** Start of Epilogue
         #EPILOG
* * **** End of Epilogue
*
*   DSECT for automatic variables in "iffast"
*      (FUNCTION #93)
*
@AUTO#iffast DSECT
         DS    XL104
iffast#t#0 DS  1A          ; t
iffast#e#0 DS  1F          ; e
iffast#b#0 DS  1F          ; b
iffast#k#0 DS  1F          ; k
iffast#p#0 DS  1A          ; p
iffast#n#0 DS  1F          ; n
iffast#q#0 DS  1A          ; q
iffast#m#0 DS  1F          ; m
iffast#ml#0 DS 1F          ; ml
iffast#md#0 DS 1F          ; md
iffast#c#0 DS  1F          ; c
iffast#d#0 DS  1F          ; d
iffast#r#0 DS  1A          ; r
*
@ZLIB06  CSECT
*
*  Non-Re-Entrant Data Section
*
@ZLIB06 CSECT
@DATA    DS 0D
*
         END
