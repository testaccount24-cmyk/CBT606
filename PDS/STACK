         COPY     #GLOBAL
$STACK   CSECT
* =====================================================================
* Stack node structure
* =====================================================================
SNODE    EQU      0,12,C'X'                 Stack node
SNNEXT   EQU      0,4,C'A'                  Ptr to next stack node
SNSIZE   EQU      4,4,C'F'                  Node size
SNUSED   EQU      8,4,C'F'                  Used size
SNLEN    EQU      12,4,C'F'                 Length of stack node
*
* =====================================================================
*
* Internal stack expansion routine
*
* Register Usage:
*
* Entry:    R0  = Required frame length
*           R12 = Entry address
*           R13 = Caller's caller frame address
*
* Exit:     Jumps to original entry point of calling routine
*
* =====================================================================
*
$$GETSTK DS       0H                        Entry
         ENTRY    $$GETSTK                  Tell the world
         USING    $$GETSTK,R12              Setup base
         LA       R15,$$STKSAV
         ST       R15,8(0,R13)              Chain save areas
         ST       R13,4(0,R15)                 ...
         LR       13,15                     Load frame reg
$$GS1    AL       R0,$$STKSZ                Add in more stack space
         GETMAIN  R,LV=(0)                  Get new stack
         MVC      SNNEXT(,R1),$$STKLST      make old head next one
         ST       R1,$$STKLST               Store new head
         ST       R0,SNSIZE(R1)             Store stack size
         MVC      SNUSED(,R1),=A(SNLEN)
         L        R13,4(R13)
         LM       R14,R12,12(R13)           Restore original registers
         BR       R15                       Reenter calling routine
         DROP     R12
*
* =====================================================================
*
* Internal stack expansion routine
*
* Register Usage:
*
* Entry:    R12 = Entry address
*           R13 = Caller's caller frame address
*
* Exit:     Returns to caller's caller
*
* =====================================================================
*
$$PUTSTK DS       0H                        Entry
         ENTRY    $$PUTSTK                  Tell the world
         USING    $$PUTSTK,R12              Setup base
         LA       R15,$$STKSAV
         ST       R15,8(0,R13)              Chain save areas
         ST       R13,4(0,R15)                 ...
         LR       13,15                     Load frame reg
         L        R1,$$STKLST               Get head of list
         MVC      $$STKLST,SNNEXT(R1)       Make next new head
         L        R0,SNSIZE(R1)             Get stack size
         FREEMAIN R,LV=(0),A=(1)            Free stack
         L        R13,4(R13)
         LM       R14,R12,12(R13)           Restore original registers
         BR       R14                       Return to caller's caller
         DROP     R12
*
*
* =====================================================================
* Static (non-volatile) literals
* =====================================================================
         LTORG
*
* =====================================================================
* Static (volatile) save area
* =====================================================================
$$STKSAV DC       18F'0'
*
* =====================================================================
* Global (volatile) pointer to stack list
* =====================================================================
         ENTRY    $$STKLST
$$STKLST DC       A(0)
*
* =====================================================================
* Global (volatile) memory allocation size (Can be changed at runtime)
* =====================================================================
         ENTRY    $$STKSZ
$$STKSZ  DC       F'16384'
*
* =====================================================================
* The End
* =====================================================================
         END
