         COPY     #GLOBAL
         COPY     #PROFILE
$PROFILE CSECT
*
* =====================================================================
*
* Internal profile prolog
*
* void $PROFP( register R1 struct $PROFD * );
*
* =====================================================================
*
$$BEG    #PROLOG  ENTRY=NO,CSECT=NO,PROFILE=NO
         LR       R2,R1
         USING    $PROFD,R2
         STCK     $PDESTME
         TIMEUSED STORADR=$PDCSTME,LINKAGE=SYSTEM,CPU=TOD
         #EPILOG
         DROP     R2
         DROP     R12
         #FRAME   START
         #FRAME   END
*
* =====================================================================
*
* Internal profile prolog
*
* void $PROFP( register R1 struct $PROFD * );
*
* =====================================================================
*
$$END    #PROLOG  ENTRY=NO,CSECT=NO,PROFILE=NO
         LR       R2,R1
         USING    $PROFD,R2
         STCK     &L.WORK
         TIMEUSED STORADR=&L.WORK2,LINKAGE=SYSTEM,CPU=TOD
         LM       R4,R5,&L.WORK
         S        R4,$PDESTME+0
         SL       R5,$PDESTME+4
         BC       11,&L.1
         SL       R4,$PROF1
&L.1     A        R4,$PDEATME+0
         AL       R5,$PDEATME+4
         BC       12,&L.2
         AL       R4,$PROF1
&L.2     STM      R4,R5,$PDEATME
         LM       R4,R5,&L.WORK2
         S        R4,$PDCSTME+0
         SL       R5,$PDCSTME+4
         BC       11,&L.3
         SL       R4,$PROF1
&L.3     A        R4,$PDCATME+0
         AL       R5,$PDCATME+4
         BC       12,&L.4
         AL       R4,$PROF1
&L.4     STM      R4,R5,$PDCATME
         #EPILOG
         DROP     R2
         DROP     R12
         #FRAME   START
&L.WORK  DS       D
&L.WORK2 DS       D
         #FRAME   END
*
* =====================================================================
*
* Internal profile write
*
* void $PROFW( void );
*
* =====================================================================
*
$$WRT    #PROLOG  ENTRY=NO,CSECT=NO,PROFILE=NO
         L        R1,$PROFL                 Get ptr to first entry
&L.1     LTR      R2,R1                     End of list?
         BZ       &L.2                      Zero, yes
         USING    $PROFD,R2                 Map it
         #CALL    PRINTF,'Routine       : %-8.8s\n',$PDNAME
         #CALL    PRINTF,'  Call count  : %5d\n',*$PDCNT
         LA       R3,$PDEATME
         #CALL    $$CTIME,'  Elapsed time',(R3)
         LA       R3,$PDCATME
         #CALL    $$CTIME,'  CPU time    ',(R3)
         L        R1,$PDNEXT                Get ptr to next entry
         MVC      $PDNEXT,$PROF1            Reset field
         XC       $PDCNT,$PDCNT             Reset field
         XC       $PDESTME,$PDESTME         Reset field
         XC       $PDEATME,$PDEATME         Reset field
         XC       $PDCSTME,$PDCSTME         Reset field
         XC       $PDCATME,$PDCATME         Reset field
         B        &L.1                      Continue loop
         DROP     R2                        Unmap it
&L.2     ST       R2,$PROFL                 Reset list ptr
         #EPILOG                            Return
         #FRAME   START                     Start of frame
         #FRAME   END                       End of frame
*---------------------------------------------------------------------*
* Convert time to seconds.microseconds
*
* Snippet from code found on the CBTTAPE (can't remember which file)
*
*---------------------------------------------------------------------*
$$CTIME  #PROLOG  CSECT=NO,ENTRY=YES,PROFILE=NO
         LM       R2,R3,0(R1)
*
         LM       R4,R5,0(R3)
         SRDL     R4,12               REMOVE INSIGNIFICANT BITS
         D        R4,=F'60000000'     DIVIDE BY 60,000,000
*---------------------------------------------------------------------*
*        CALCULATE NO. OF SECONDS INTO CURRENT MINUTE
*---------------------------------------------------------------------*
         LR       R15,R4
         SLR      R14,R14
         D        R14,=F'1000000'
         LR       R6,R15
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MICROSEC INTO CURRENT SECOND
*---------------------------------------------------------------------*
         LR       R4,R14              REMAINDER IN R4
*---------------------------------------------------------------------*
*        CALCULATE NO. OF SECONDS INTO CURRENT DAY
*        AND CONVERT TO EBCDIC
*---------------------------------------------------------------------*
         LR       R14,R5              R4=((R5//1440)*60)+SECONDS
         SRDA     R14,32
         D        R14,=F'1440'
         MH       R14,=H'60'
         ALR      R14,R6              ADD SECONDS
         LR       R5,R14
         #CALL    PRINTF,'%s: %5d.%d\n',(R2),(R5),(R4)
         #EPILOG                      RETURN TO CALLER
         #FRAME   START
         #FRAME   END
*
* =====================================================================
*
* Internal profile prolog
*
* void $$PROFP( register R1 struct $PROFD * );
*
* =====================================================================
*
$$PROFP  #PROLOG  ENTRY=YES,CSECT=NO,PROFILE=NO
         LR       R2,R1                     Load PD base
         USING    $PROFD,R2                 Map it
*
         ICM      R1,B'1111',$$ACTPD        Get current PD
         BZ       &L.1                      None, no need to suspend
         ST       R1,$PDPREV                Remember current PD
         L        R15,=A($$END)             Get end rtn ptr
         #CALL    (R15)                     Go suspend current PD
*
&L.1     LR       R1,R2                     Restore new PD
         ST       R1,$$ACTPD                Remember new PD
         L        R15,=A($$BEG)             Get begin rtn ptr
         #CALL    (R15)                     Go initiate new PD timings
*
         L        R1,$PDCNT                 Get count
         AL       R1,$PROF1                 Bump it
         ST       R1,$PDCNT                 Store count
*
         CLC      $PDNEXT,$PROF1            PD added to list yet?
         BNE      &L.99                     No, branch
         MVC      $PDNEXT,$PROFL            Remember previous node
         ST       R2,$PROFL                 Make this one new head
&L.99    #EPILOG                            Exit
         DROP     R2                        Unmap PD
         DROP     R12                       Unbase
         #FRAME   START                     Start of frame
         #FRAME   END                       End of frame
*
* =====================================================================
*
* Internal profile epilog
*
* void $$PROFE( register R1 struct $PROFE * );
*
* =====================================================================
*
$$PROFE  #PROLOG  ENTRY=YES,CSECT=NO,PROFILE=NO
         L        R2,$$ACTPD                Get active PD
         USING    $PROFD,R2                 Map it
*
         LR       R1,R2                     PD to parm reg
         L        R15,=A($$END)             Get end rtn ptr
         #CALL    (R15)                     Go finalize active PD
*
         ICM      R1,B'1111',$PDPREV        Get previous PD ptr
         BNZ      &L.99                     Have one, don't write data
*
         L        R15,=A($$WRT)             Get write rtn ptr
         #CALL    (R15)                     Go write profile data
         XC       $$ACTPD,$$ACTPD           No more active PDs
         XC       $PDPREV,$PDPREV           Cleanup
         ST       R1,$$ACTPD                Make it the active PD
         L        R15,=A($$BEG)             Get begin rtn ptr
         #CALL    (R15)                     Go resume previous PD
*
&L.99    #EPILOG                            Exit
*
         DROP     R2                        Unmap PD
         DROP     R12                       Unbase
         #FRAME   START                     Start of frame
         #FRAME   END                       End of frame
*
*
*
$PROF1   DC       F'1'
$PROFL   DC       A(0)
$$ACTPD  DC       A(0)
*
*
*
         END
