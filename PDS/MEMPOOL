         COPY     #GLOBAL
$MEMPOOL CSECT
* =====================================================================
* Memory cell structure
* =====================================================================
CELL     EQU      0,12,C'X'                 Cell struct
CNEXT    EQU      0,4,C'A'                  Ptr to next cell
CSIZE    EQU      4,4,C'F'                  Cell size-includes headeer
CFREE    EQU      8,4,C'A'                  Ptr to first free node
CLEN     EQU      12,4,C'F'                 Length of cell header
* =====================================================================
* Free memory node structure
* =====================================================================
NODE     EQU      0,8,C'X'                  Node struct
NNEXT    EQU      0,4,C'A'                  Ptr to next node
NSIZE    EQU      4,4,C'F'                  Cell size-includes headeer
NLEN     EQU      8,4,C'F'                  Length of node header
*
* =====================================================================
*
* Internal malloc:
*
* void *$$MALLOC( size_t size );
* R15            R1
*
* =====================================================================
*
$$MALLOC #PROLOG  ENTRY=NO,CSECT=NO         Entry
*
* Get size, add in header size, and round to 8 byte boundary
*
         LR       R2,R1                     Get length
         LA       R2,NLEN+7(R2)             Cell header and rounding
         SRL      R2,3                      Round it...
         SLL      R2,3                      ...to 8 byte boundary
*
* Initialize some registers
*
         XR       R4,R4                     Best cell
         XR       R5,R5                     Best node
         XR       R6,R6                     Prev best node
         XR       R7,R7                     Best size
         BCTR     R7,0                      Make largest possible
*
* Run through each cell within the memory pool
*
         LA       R14,$POOL                 Point to head of pool
&L.1     ICM      R14,B'1111',CNEXT(R14)    Get ptr and test
         BZ       &L.4                      Zero, no more cells
*
* Run through free list to find node with best fit
*
         XR       R1,R1                     Clear prev node ptr
         LA       R15,CFREE(R14)            Point to free list head
         B        &L.3                      Branch into loop
&L.2     LR       R1,R15                    Current node -> Prev node
&L.3     ICM      R15,B'1111',NNEXT(R15)    Get ptr and test
         BZ       &L.1                      Zero, no more nodes
*
* Is node big enough to satisfy our needs?
*
         L        R0,NSIZE(R15)             Get this nodes size
         CLR      R2,R0                     Needed size > node size?
         BH       &L.3                      Yes, can't use this node
*
* Is node a better fit that previous (if any) match?
*
         CLR      R7,R0                     Best size < node size?
         BL       &L.3                      Yes, skip this node
*
* Found a better fit, so keep track of it
*
         LR       R7,R0                     Save new best size
         LR       R6,R1                     Save prev node ptr
         LR       R5,R15                    Save new best node ptr
         LR       R4,R14                    Save new best cell
         B        &L.3                      Go try again
*
* If we didn't find a node, we need to allocate one
*
&L.4     LTR      R5,R5                     Did we find a usable node?
         BNZ      &L.5                      Yes, don't need to alloc 1
         LA       R7,CLEN(R2)               Add in a cell header
         AL       R7,$CELLSZ                Add more for future allocs
         GETMAIN  R,LV=(7)                  Allocate it
*
* Initialize the new cell and node headers
*
         LR       R4,R1                     Load to new cell ptr
         L        R0,$POOL                  Get head of pool
         ST       R0,CNEXT(R4)              Store in cell
         ST       R7,CSIZE(R4)              Store cell length
         LA       R5,CLEN(R4)               Calc ptr to node
         ST       R5,CFREE(R4)              Store in cell
         ST       R4,$POOL                  New pool head
         XC       NNEXT(,R5),NNEXT(R5)      Clear next ptr
         LA       R1,CLEN                   Get cell header len
         SLR      R7,R1                     Get size of node
         ST       R7,NSIZE(R5)              Store it
*
* If the node is bigger than needed, we have to split out the excess
*
&L.5     L        R14,NSIZE(R5)             Get node size
         SLR      R14,R2                    Calc excess length
         BP       &L.6                      Zero, an exact fit
         LA       R15,0(R2,R5)              Point to new node head
         ST       R14,NSIZE(R15)            Set node size
         MVC      NNEXT(,R15),NNEXT(R5)     Insert after...
         ST       R15,NNEXT(R5)             ...best node
         ST       R2,NSIZE(R5)              Set best node size
*
* Unlink best-fit node from free list
*
&L.6     LA       R1,CFREE(R4)              Ptr to head of list
         LTR      R6,R6                     Have a previous node ptr?
         BZ       &L.7                      No, go add to head
         LA       R1,NNEXT(R6)              Yes, get ptr to next
&L.7     MVC      NNEXT(,R1),NNEXT(R5)      Move over next ptr
         XC       NNEXT(,R5),NNEXT(R5)      Clean next ptr
         LA       R15,NLEN(R5)              Bump ptr past header
*
* R15 contains pointer to new memory or NULL
*
         #EPILOG                            Return to caller
         DROP     R12
         #FRAME   START                     Start frame
         #FRAME   END                       End frame
*
* =====================================================================
*
* Internal free:
*
* void $$FREE( void *ptr );
*             R1
*
* =====================================================================
*
$$FREE   #PROLOG  ENTRY=NO,CSECT=NO        Entry
*
* Get pointer and back off to start of header
*
         LTR      R2,R1                     Get length
         BZ       &L.10                     Zero, nothing to free
         LA       R1,NLEN                   Get node header length
         SLR      R2,R1                     Back off ptr
*
* Initialize some registers
*
         XR       R4,R4                     Prev cell
         XR       R5,R5                     Prev node
*
* Run through each cell within the memory pool
*
         LA       R14,$POOL                 Point to head of pool
         B        &L.2                      Branch into loop
&L.1     LR       R4,R14                    Prev node = Current node
&L.2     ICM      R14,B'1111',CNEXT(R14)    Get ptr and test
         BZ       &L.11                     Bad news!  Not in pool!
         CLR      R14,R2                    Cell ptr > node ptr?
         BH       &L.1                      Yes, node not in this cell
         LR       R1,R14                    Get cell ptr
         AL       R1,CSIZE(R1)              Calc cell end ptr
         CLR      R1,R2                     Cell end ptr < node ptr?
         BL       &L.1                      Yes, node not in this cell
*
* Found the right cell so run the free list to find next highest node
*
         LA       R15,CFREE(R14)            Point to free list head
         B        &L.4                      Branch into loop
&L.3     LR       R5,R15                    Current node -> Prev node
&L.4     ICM      R15,B'1111',NNEXT(R15)    Get ptr and test
         BZ       &L.3                      Zero, no more nodes
         CLR      R15,R2                    free ptr < node ptr
         BL       &L.3                      Yes, go look again
*
* Found the node that follows ours, so link ours in before it
*
         LTR      R5,R5                     Have a previous node?
         BZ       &L.6                      No, go add to list head
*
* Can we tack our node onto end of previous node?
*
         LR       R1,R5                     Get prev node ptr
         L        R11,NSIZE(R1)
         AL       R1,NSIZE(R1)              Calc prev end ptr
         CLR      R1,R2                     End ptr != our ptr?
         BNE      &L.5                      No, can't coalesce
*
* Good, we can coalesce the two nodes
*
         L        R1,NSIZE(R5)              Get prev size
         AL       R1,NSIZE(R2)              Add in our size
         ST       R1,NSIZE(R5)              Store back into prev
         LR       R2,R5                     Our becomes coalesced node
         B        &L.7                      Go try to coalesce more
*
* Bummer, can't coalesce yet so insert our node after the prev node
*
&L.5     MVC      NNEXT(,R2),NNEXT(R5)      Move over next ptr
         ST       R2,NNEXT(R5)              Store our node
         B        &L.7                      Go try to coalesce more
*
* Our node gets to move to the head of the class
*
&L.6     MVC      NNEXT(,R2),CFREE(R14)     Old head after our node
         ST       R2,CFREE(R14)             Our node is new head
*
* Try to assimilate the node following ours
*
&L.7     ICM      R1,B'1111',NNEXT(R2)      Get and test next ptr
         BZ       &L.8                      Zero, not next node
         LR       R15,R2                    Get our size
         AL       R15,NSIZE(R15)            Add in our size
         CLR      R1,R15                    End ptr = next node ptr?
         BNE      &L.8                      No, can't assimilate
*
* Great!  Assimilation prevents fragmentation
*
         L        R15,NSIZE(R2)             Get our size
         AL       R15,NSIZE(R1)             Add in next size
         ST       R15,NSIZE(R2)             Store back into ours
         MVC      NNEXT(,R2),NNEXT(R1)      Unlink next node
*
* Finally, if the entire cell is empty release it to the OS
*
&L.8     L        R1,NSIZE(R2)              Get node size
         LA       R1,CLEN(R1)               Add in a cell header
         CL       R1,CSIZE(R14)             Do they match?
         BNE      &L.10                     No, can't free cell
*
* Unlink and free this cell
*
         LA       R1,$POOL                  Gen ptr to pool head
         LTR      R4,R4                     Have previous ptr?
         BZ       &L.9                      Nope, leanch
         LA       R1,CNEXT(R4)              Gen ptr to prev->next
&L.9     MVC      CNEXT(,R1),CNEXT(R14)     Unlink it
         L        R0,CSIZE(R14)             Get length of cell
         FREEMAIN R,A=(14),LV=(0)           Free it
*
* Nothing is returned to caller
*
&L.10    #EPILOG                            Return to caller
         DROP     R12
         #FRAME   START                     Start frame
         #FRAME   END                       End frame
&L.11    DC       C'BAD POOL'               Can't do much else
*
* =====================================================================
*
* void *malloc( size_t size );
*
* =====================================================================
*
MALLOC   DS       0H
         ENTRY    MALLOC
         USING    *,R15
*
* Just load length and transfer to internal malloc
*
         L        R1,0(R1)                  Load length into parm reg
         L        R15,=A($$MALLOC)          Get internal malloc addr
         BR       R15                       Transfer to it
         DROP     R15
*
* =====================================================================
*
* void free( void *ptr );
*
* =====================================================================
*
FREE     DS       0D
         ENTRY    FREE
         USING    *,R15
*
* Just load length and transfer to internal malloc
*
         L        R1,0(R1)                  Load ptr into parm reg
         L        R15,=A($$FREE)            Get internal free addr
         BR       R15                       Transfer to it
         DROP     R15
*
* =====================================================================
*
* void *calloc( size_t nmemb, size_t size );
*
* =====================================================================
*
CALLOC   #PROLOG  ENTRY=YES,CSECT=NO        Entry
*
* Get a new block of memory
*
         LM       R2,R3,0(R1)               Get count and size
         MR       R2,R2                     Calc len (result in R3)
         LR       R1,R3                     Put length in parm reg
         L        R15,=A($$MALLOC)          Get internal malloc addr
         BALR     14,15                     Go get some memory
         LTR      R2,R15                    Did we get it?
         BZ       &L.1                      No, get out
*
* Set memory block to null
*
         #MEMSET  (R2),X'00',(R3)           Set memory to null
*
* R15 contains pointer to new memory or NULL
*
&L.1     #EPILOG                            Return to caller
         DROP     R12
         #FRAME   START                     Start frame
         #FRAME   END                       End frame
*
* =====================================================================
*
* void *realloc( void *ptr, size_t size );
*
* =====================================================================
*
REALLOC  #PROLOG  ENTRY=YES,CSECT=NO        Entry
         LM       R2,R3,0(R1)               Get orig ptr and new len
*
* Get a new block of memory
*
         LTR      R1,R3                     Put length in parm reg
         BZ       &L.2                      Zero, don't alloc new blk
         L        R15,=A($$MALLOC)          Get malloc addr
         BALR     14,15                     Go get some memory
         LTR      R4,R15                    Did we get it? (save ptr)
         BZ       &L.3                      No, get out
*
* If the input ptr is NULL, then we don't need to copy anything
*
         LTR      R14,R2                    Need to copy?
         BZ       &L.3                      No, go exit
*
* Determine which block is shorter
*
         LA       R1,NLEN                   Get "backoff" length
         SLR      R15,R1                    Point to node header
         SLR      R14,R1                    Point to node header
         L        R3,CSIZE(R14)             Get "old" length
         CL       R3,CSIZE(R15)             Is old length < new length?
         BL       &L.1                      Yes, then use old length
         L        R3,CSIZE(R15)             No, use new length
*
* Copy the old data over
*
&L.1     #MEMCPY  (R4),(R2),(R3)            Copy old to new
*
* Free original memory (if any)
*
&l.2     XR       R15,R15                   Clear return value
         LTR      R1,R2                     Get original ptr
         BZ       &L.3                      Zero, nothing to free
         L        R15,=A($$FREE)            Get internal free ptr
         BALR     R14,R15                   Go free memory
         LR       R15,R4                    Set return value
*
* R15 contains pointer to new memory or NULL
*
&L.3     #EPILOG                            Return to caller
         DROP     R12
         #FRAME   START                     Start frame
         #FRAME   END                       End frame
*
* =====================================================================
* Static (volatile) pointer to memory pool
* =====================================================================
$POOL    DC       A(0)
*
* =====================================================================
* Global (volatile) memory allocation size (Can be changed at runtime)
* =====================================================================
         ENTRY    $CELLSZ
$CELLSZ  DC       F'16384'
*
* =====================================================================
* The End
* =====================================================================
         END
